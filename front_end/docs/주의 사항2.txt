1. 새로 Context를 만들 때 Provider를 최상위 컴포넌트인 App 컴포넌트에 등록해주는 작업을 잊지 말자.

2. 리액트에서 img태그를 쓸 때는 alt속성을 더미로라도 꼭 추가해줘야 오류가 나지 않는다.

3. css에서 부모 자식 박스가 있을 때 자식 박스의 크기인 width와 height를 100%로 지정하면 부모의 display가 inline-block일 때 자식은 부모의 크기에 맞추고 grid나 flex일 때 자식은 자기 안의 내용물의 크기에 맞춘다.

4. useState를 사용할 때 배열에 원소를 추가하고 싶으면 '.push'가 아니라 '.concat'을 써야 한다. 왜냐하면 state가 const로 정의되기 때문에 '.push'함수가 안먹힌다.

5. React에서 화면을 리렌더링하는 순간은 useState를 썼을 때 할당한 state값(반환된 배열의 0번째 값)이 set함수(반환된 배열의 1번째 값)에 의해 바뀌었을 때 일어나는데, async-await을 써서 생성된 Promise객체 값을 쓰기 위해 '.then'을 붙여서 그 안의 함수 안에 set함수를 쓰면 이상하게도 React가 화면을 리렌더링 하지 않는다. 그러므로 이 상황에서 화면을 강제로 리렌더링 시켜 주려면 더미 state값을 정의해서 임의로 변경하는 set함수를 나란히 붙여주면 된다. 단, 앞이 아니라 뒤에다가 붙여야 된다. 이건 은근 알아내기 까다로운 사실이다. 콜백함수 안에서의 set함수는 React가 리렌더링을 하지 않는건가...?

11. async-await을 쓰고 싶다면 비동기적으로 처리하고 싶은 함수를 다룰 때 아래 1번 예시 처럼 정의하지 말고 2번예시처럼 해줘라.

  * 1번 예시
  const setDeleteSuccess = e => {} //직접활용

  * 2번 예시
  const setDeleteSuccess = e => {}
  const asyncAbleSetDeleteSuccess = e => {
    return new Promise((sol, jec) => {
      setDeleteSuccess(e);
      sol("");//써야되는 더미(함수성공시 실행되는 것)
    });
  }; //직접활용은 asyncAbleSetDeleteSuccess로 하기

2번 예시처럼 new Promise로 Promise객체를 생성하기 위해 새로 정의하는 함수로 감싸서 활용해야 나중에 await이 붙을 때 잘 동작한다. await은 Promise객체를 필요로 하기 때문이다. 단, 나중에 쓸 땐 await이 반드시 들어가야한다.

12. TypeScript에서 window객체와 같은 WebAPI를 직접 다루고자 할 때 에러를 일으킬 수 있다 그 경우 window를 쓰지 말고 함수 안에서 인자로 받은 e를 쓰자.

13. GraphQL의 refetch방식은 const {data, loading, refetch} = useQuery...에서의 refetch함수를 활용하는 방법도 있고 아래처럼

  const [uploadMutation] = useMutation(UPLOAD, {
    refetchQueries: () => [{ query: FEED_QUERY }]
  });
  await uploadMutation({
          variables: {
            files: [path],
            caption: captionInput.value,
            location: locationInput.value
          }
        });
처럼 mutation이 일어날 때 여러 쿼리들을 일괄 refetch시킬 수 있다.

14. useEffect 쓸 때 두번째 인자값인 []에서 TSLint에서 노란줄 경고가 나온다면 해당 줄 바로 위에 다음을 추가해라.
  // eslint-disable-next-line react-hooks/exhaustive-deps

15. GraphQL통신할 때 "must not have a selection since type boolean has no subfields"라는 오류메시지를 받았다면 아마 mutation이라서 boolean만 응답받는데 일반query요청처럼 인자를 반환값과 착각해서 그런 것일 수도 있다. 예컨데

  export const UPLOAD = gql`
    mutation fileUpload(
      $address: String!
      $caption: String!
    ) {
      fileUpload(address: $address, caption: $caption)
    }
  `;
  이렇게 써야 하는데

  export const UPLOAD = gql`
    mutation fileUpload(
      $address: String!
      $caption: String!
    ) {
      fileUpload(address: $address, caption: $caption) {
        address
        caption
      } // => 반환값을 설정한 경우
    }
  `;이렇게 쓴 경우이다.

16. css grid 레이아웃에서 셀을 합칠 때
  grid-column: 1 / 3;
  grid-row: 2 / span 2;
처럼 활용하는데 "/"의 좌측의 값은 시작지점인 건 알겠지만 우측의 값은 후자의 경우 span을 붙이면 몇칸을 합치겠다는 선언인 것 같고 전자는 모르겠다.


17. z-index의 값에 따른 상대적 위치 차이는 같은 부모 안에서만 효과가 있고 부모나 조상이 다르면 다른 조상의 하위의 것들 사이에서의 z-index 차이는 효과가 없다.

