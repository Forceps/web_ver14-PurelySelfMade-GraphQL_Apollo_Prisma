1. react에서 배열인 state를 일부 원소를 제거한 것으로 업데이트 하기 위해서 생각할 수 있는 방벙은 2가지인데 예시는 아래와 같다.
  가.    
    setCItems((p: any[]) => {      
      p.splice(idx, 1);
      return p;
    }));
  나. 
    let tempA = CItems;
    tempA.splice(idx, 1);
    setCItems(tempA);

전자는 set함수 안에 변경함수를 넣어서 그 변경함수 안에서 바꾸는 식이고, 후자는 밖에 state를 가공할 수 있도록 let을 써서 다른 이름으로 새로 정의 한 다음 그걸 가지고 조작해서 set함수에 넣어주는 방식이다.
splice함수는 추출함수여서 추출되고 남은 부분은 원래 정의된 변수에 남게 되는데 const를 사용하는 useState Hook을 사용하는 입장에서는 splice를 state에 직접 사용할 수 없어서 새로 정의하는 작업이 필요한 것이다.
직접 사용해보니 전자에서는 예상치 못한 오류가 발생했다. 위 과정을 event함수에 넣어서 실행해보니 도저히 알 수 없는 이유로 한번 촉발에 동시에 2개씩 삭제된 것이다. 이는 후자로 로직을 변경했더니 해결되었다.
그러므로 앞으로는 변경함수를 이용하기 보다는 state재정의를 이용하는 것이 권장된다.
그리고 배열삭제처리에 의해 변경된 state는 추가나 수정과는 달리 rerendering되지 않는 문제가 있었는데 이땐 소속된 event함수 안에 DummyState를 같이 업데이트 해주면 렌더링 시킬 수 있다.

2. React의 setState함수는 state변경을 비동기적으로 처리하는데 이는 async-await조차 막을 수 없다. 그래서 만약 시점이 중요한 함수에서 비동기적인 변수 할당을 원할 때에는 useRef를 써야 한다.

3. 비동기 처리 떄문에 고생할 떄면 가급적 async-await을 사용하는 것 보다는 직전에 렌더링 된 컴포넌트에서 data를 미리 받아놓고 직후 컴포넌트에서 그 data를 활용하는 것이 정신건강에 이롭다. 

4. "'await' has no effect on the type of this expression." <= Visual Studio 편집창에서 이 경고가 나오면 믿지 마라.

5. useState를 사용할 때 배열에 원소를 추가하고 싶으면 '.push'가 아니라 '.concat'을 써야 한다. 왜냐하면 state가 const로 정의되기 때문에 '.push'함수가 안먹힌다.

6. React에서 화면을 리렌더링하는 순간은 useState를 썼을 때 할당한 state값(반환된 배열의 0번째 값)이 set함수(반환된 배열의 1번째 값)에 의해 바뀌었을 때 일어나는데, async-await을 써서 생성된 Promise객체 값을 쓰기 위해 '.then'을 붙여서 그 안의 함수 안에 set함수를 쓰면 이상하게도 React가 화면을 리렌더링 하지 않는다. 그러므로 이 상황에서 화면을 강제로 리렌더링 시켜 주려면 더미 state값을 정의해서 임의로 변경하는 set함수를 나란히 붙여주면 된다. 단, 앞이 아니라 뒤에다가 붙여야 된다. 이건 은근 알아내기 까다로운 사실이다. 콜백함수 안에서의 set함수는 React가 리렌더링을 하지 않는건가...?

7. useQuery를 쓸 땐 데이터가 fetch되기 전과 후로 나뉘는데 React는 그걸 Listening해서 화면을 각각 렌더링해주는 것 같다. fetch된 후의 데이터를 변수에 담거나 state값으로 설정하고 싶을 땐 Container-Presenter구조에서 Presenter 컴포넌트의 return 앞에다가 if를 써서 Loading이 false가 됐을 떄만 할당하도록 작성하면 된다. Container에서는 잘 안된다.

8. 동기-비동기 처리를 다룰 때는 함수의 순서(전후관계)가 매우 중요하다.

9. css에서 부모의 position을 relative로, 자식의 position을 absolute로 지정해주면 부모 안의 자식의 크기의 width와 height 값을 백분율로 표시할 수 있게 되고 요소를 서로 겹치게 할 수 있다. 서로 겹치게 될 때 z-index를 쓰려면 display를 static을 제외한 나머지로 설정해 줘야 한다.

10. css에서 display속성을 inline이나 inline-block으로 지정하면 내가 설정하지도 않은 작은 틈새를 멋대로 벌리는데 이선 개발자도구에서 잡히지도 않는다. 준 만능해결사인 grid나 flex를 써라.

11. "The left-hand side of an assignment expression may not be an optional property access."이런 에러가 나오면 typescript에서 optional chaining 연산자 "?."를 쓴 경우일 수 있다. 조건문을 서서 제거해보자.

12. React와 Vanilla JavaScript를 혼용해서 쓰면서 변동되는 값을 let이나 useRef와 같은  변수가 아니라 HTML에 저장하는 기상천외한 방법을 발견했다. 예컨데 값을 저장할 노드를 node라 하면 "node.textContent = 값"이런 식으로 쓰고 다시 불러올때는 node.textContent를 쓰는 것이다. 그 Element는 css style을 "dispaly: none;"으로 설정하는 것이다. 이는 보안상 가치가 없는 값에서 유용하게 활용 될 것으로 기대된다. 