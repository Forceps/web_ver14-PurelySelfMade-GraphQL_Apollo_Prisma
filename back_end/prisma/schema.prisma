generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model chat {
  chat_id         Int       @default(autoincrement()) @id
  comment         String
  day             Int
  hour            Int
  minute          Int
  month           Int
  room            Int
  second          Int
  user            Int
  year            Int
  chat_room       chat_room @relation(fields: [room], references: [chat_room_id])
  user_chatTouser user      @relation(fields: [user], references: [user_id])

  @@index([room], name: "Affiliation_idx")
  @@index([user], name: "Participant_idx")
}

model chat_member {
  chat_member_id         Int       @default(autoincrement()) @id
  room                   Int
  user                   Int
  chat_room              chat_room @relation(fields: [room], references: [chat_room_id])
  user_chat_memberTouser user      @relation(fields: [user], references: [user_id])

  @@index([user], name: "member_idx")
  @@index([room], name: "room_idx")
}

model chat_room {
  chat_room_id Int           @default(autoincrement()) @id
  name         String
  chat         chat[]
  chat_member  chat_member[]
}

model comment {
  comment            String
  comment_id         Int     @default(autoincrement()) @id
  converted          Boolean @default(false)
  day                Int
  hour               Int
  likes              Int     @default(0)
  minute             Int
  month              Int
  post               Int
  user               Int
  year               Int
  post_commentTopost post    @relation(fields: [post], references: [post_id])
  user_commentTouser user    @relation(fields: [user], references: [user_id])

  @@index([post], name: "what_post_idx")
  @@index([user], name: "who_user_idx")
}

model directory {
  directory_id           Int         @default(autoincrement()) @id
  group                  Int?
  name                   String
  parent_id              Int?
  root                   Boolean     @default(false)
  user                   Int?
  group_directoryTogroup group?      @relation(fields: [group], references: [group_id])
  directory              directory?  @relation("directoryTodirectory_parent_id", fields: [parent_id], references: [directory_id])
  user_directoryTouser   user?       @relation(fields: [user], references: [user_id])
  other_directory        directory[] @relation("directoryTodirectory_parent_id")
  image                  image[]
  music                  music[]
  post                   post[]
  video                  video[]

  @@index([group], name: "group_own_idx")
  @@index([user], name: "owner_idx")
  @@index([parent_id], name: "parent_id_idx")
}

model friend {
  consent                      Boolean @default(false)
  friend_id                    Int     @default(autoincrement()) @id
  proposer                     Int
  respondent                   Int
  user_friend_proposerTouser   user    @relation("friend_proposerTouser", fields: [proposer], references: [user_id])
  user_friend_respondentTouser user    @relation("friend_respondentTouser", fields: [respondent], references: [user_id])

  @@index([proposer], name: "proposer_idx")
  @@index([respondent], name: "respondent_idx")
}

model group {
  administrator                                         Int
  group_id                                              Int          @default(autoincrement()) @id
  identiti_back_img                                     String?
  identiti_profile_img                                  String?
  name                                                  String
  participation_system                                  Int
  purpose                                               String       @unique
  withdrawal_system                                     Int
  user                                                  user         @relation(fields: [administrator], references: [user_id])
  group_system_group_participation_systemTogroup_system group_system @relation("group_participation_systemTogroup_system", fields: [participation_system], references: [group_system_id])
  group_system_group_withdrawal_systemTogroup_system    group_system @relation("group_withdrawal_systemTogroup_system", fields: [withdrawal_system], references: [group_system_id])
  directory                                             directory[]

  @@index([participation_system], name: "participation_idx")
  @@index([purpose], name: "their_purpose")
  @@index([administrator], name: "who_is_admin_idx")
  @@index([withdrawal_system], name: "withdrawal_idx")
}

model group_system {
  category                                       String
  group_system_id                                Int     @default(autoincrement()) @id
  name                                           String
  group_group_participation_systemTogroup_system group[] @relation("group_participation_systemTogroup_system")
  group_group_withdrawal_systemTogroup_system    group[] @relation("group_withdrawal_systemTogroup_system")
}

model image {
  address                    String
  caption                    String
  directory                  Int
  image_id                   Int       @default(autoincrement()) @id
  type                       String?
  volume                     Int
  directory_directoryToimage directory @relation(fields: [directory], references: [directory_id])

  @@index([directory], name: "image_dir_idx")
}

model liked {
  liked_id         Int  @default(autoincrement()) @id
  post             Int
  user             Int
  post_likedTopost post @relation(fields: [post], references: [post_id])
  user_likedTouser user @relation(fields: [user], references: [user_id])

  @@index([post], name: "liked_post_idx")
  @@index([user], name: "liking_user_idx")
}

model music {
  address                    String
  caption                    String
  directory                  Int
  music_id                   Int       @default(autoincrement()) @id
  type                       String?
  volume                     Int
  directory_directoryTomusic directory @relation(fields: [directory], references: [directory_id])

  @@index([directory], name: "music_dir_idx")
}

model ngram_post_stopwords {
  value String @id
}

model notification {
  content                 String
  day                     Int
  hour                    Int
  minute                  Int
  month                   Int
  notification_id         Int    @default(autoincrement()) @id
  second                  Int
  sender                  String @default("Administrator")
  title                   String
  user                    Int
  year                    Int
  user_notificationTouser user   @relation(fields: [user], references: [user_id])

  @@index([user], name: "to_who_idx")
}

model post {
  caption                                   String
  content                                   String?
  day                                       Int
  directory                                 Int
  face                                      String?
  face_type                                 post_face_type   @default(text)
  hour                                      Int
  likes                                     Int              @default(0)
  minute                                    Int
  month                                     Int
  post_id                                   Int              @default(autoincrement()) @id
  second                                    Int
  user                                      Int
  views                                     Int              @default(0)
  year                                      Int
  directory_directoryTopost                 directory        @relation(fields: [directory], references: [directory_id])
  user_postTouser                           user             @relation(fields: [user], references: [user_id])
  comment                                   comment[]
  liked                                     liked[]
  post_relevance_postTopost_relevance_post1 post_relevance[] @relation("postTopost_relevance_post1")
  post_relevance_postTopost_relevance_post2 post_relevance[] @relation("postTopost_relevance_post2")
  watched                                   watched[]

  @@index([directory], name: "belong_idx")
  @@index([caption, content], name: "search_post")
  @@index([user], name: "user_idx")
}

model post_relevance {
  degree                          Int
  post1                           Int
  post2                           Int
  post_relevance_id               Int  @default(autoincrement()) @id
  post_postTopost_relevance_post1 post @relation("postTopost_relevance_post1", fields: [post1], references: [post_id])
  post_postTopost_relevance_post2 post @relation("postTopost_relevance_post2", fields: [post2], references: [post_id])

  @@index([post1], name: "post1_idx")
  @@index([post2], name: "post2_idx")
}

model subscriber {
  author                       Int
  reader                       Int
  subscriber_id                Int  @default(autoincrement()) @id
  user_subscriber_authorTouser user @relation("subscriber_authorTouser", fields: [author], references: [user_id])
  user_subscriber_readerTouser user @relation("subscriber_readerTouser", fields: [reader], references: [user_id])

  @@index([reader], name: "arrive_at_idx")
  @@index([author], name: "distributer_idx")
  @@index([author], name: "publisher_idx")
  @@index([reader], name: "reader_idx")
}

model user {
  avatar                                    String?
  back_img                                  String?
  creator                                   Int              @default(0)
  daily_allocated_capacity                  Int              @default(50)
  email                                     String           @unique
  guaranteed_capacity                       Int              @default(300)
  password                                  String
  phone_number                              Int?
  username                                  String
  user_id                                   Int              @default(autoincrement()) @id
  chat                                      chat[]
  chat_member                               chat_member[]
  comment                                   comment[]
  directory                                 directory[]
  friend_friend_proposerTouser              friend[]         @relation("friend_proposerTouser")
  friend_friend_respondentTouser            friend[]         @relation("friend_respondentTouser")
  group                                     group[]
  liked                                     liked[]
  notification                              notification[]
  post                                      post[]
  subscriber_subscriber_authorTouser        subscriber[]     @relation("subscriber_authorTouser")
  subscriber_subscriber_readerTouser        subscriber[]     @relation("subscriber_readerTouser")
  user_relevance_userTouser_relevance_user1 user_relevance[] @relation("userTouser_relevance_user1")
  user_relevance_userTouser_relevance_user2 user_relevance[] @relation("userTouser_relevance_user2")
  watched                                   watched[]

  @@index([username], name: "name_search")
}

model user_relevance {
  degree                          Int
  user1                           Int
  user2                           Int
  user_relevance_id               Int  @default(autoincrement()) @id
  user_userTouser_relevance_user1 user @relation("userTouser_relevance_user1", fields: [user1], references: [user_id])
  user_userTouser_relevance_user2 user @relation("userTouser_relevance_user2", fields: [user2], references: [user_id])

  @@index([user1], name: "user1_idx")
  @@index([user2], name: "user2_idx")
}

model video {
  address                    String
  caption                    String
  directory                  Int
  thumbnail                  String?
  type                       String?
  video_id                   Int       @default(autoincrement()) @id
  volume                     Int
  directory_directoryTovideo directory @relation(fields: [directory], references: [directory_id])

  @@index([directory], name: "video_dir_idx")
}

model watched {
  count              Int  @default(1)
  deprecated         Int  @default(0)
  interest           Int
  post               Int
  user               Int
  watched_id         Int  @default(autoincrement()) @id
  post_postTowatched post @relation(fields: [post], references: [post_id])
  user_userTowatched user @relation(fields: [user], references: [user_id])

  @@index([post], name: "watched_post_idx")
  @@index([user], name: "watching_user_idx")
}

enum post_face_type {
  image
  text
}